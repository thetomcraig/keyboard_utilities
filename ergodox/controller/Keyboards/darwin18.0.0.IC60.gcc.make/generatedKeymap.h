/* Copyright (C) 2014-2018 by Jacob Alexander
 *
 * This file is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file.  If not, see <http://www.gnu.org/licenses/>.
 */

// This file was generated by the kll compiler, DO NOT EDIT.
// Generation Date:    2018-11-17
// KLL Emitter:        kiibohd
// KLL Version:        0.5.6.6
// KLL Git Changes:    None
// Compiler arguments:
//    /Users/tom/.local/share/virtualenvs/Keyboards-vdxSI5dA/lib/python3.7/site-packages/kll/__main__.py
//    --kiibohd-debug
//    --config
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Scan/Devices/MatrixARMPeriodic/capabilities.kll
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Macro/PartialMap/capabilities.kll
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Output/HID-IO/capabilities.kll
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Output/USB/capabilities.kll
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Debug/latency/capabilities.kll
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Debug/led/capabilities.kll
//    --base
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Scan/Infinity_60/scancode_map.kll
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Scan/Infinity_60/scancode_map.alphabet.kll
//    --default
//      /Users/tom/.local/share/virtualenvs/Keyboards-vdxSI5dA/lib/python3.7/site-packages/kll/layouts/stdFuncMap.kll
//    --partial
//      /Users/tom/.local/share/virtualenvs/Keyboards-vdxSI5dA/lib/python3.7/site-packages/kll/layouts/ic60/hhkbpro2.kll
//    --emitter
//      kiibohd
//    --def-output
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Keyboards/darwin18.0.0.IC60.gcc.make/kll_defs.h
//    --map-output
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Keyboards/darwin18.0.0.IC60.gcc.make/generatedKeymap.h
//    --hid-output
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Keyboards/darwin18.0.0.IC60.gcc.make/usb_hid.h
//    --pixel-output
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Keyboards/darwin18.0.0.IC60.gcc.make/generatedPixelmap.c
//    --json-output
//      /Users/tom/dev/keyboard_utilities/ergodox/controller/Keyboards/darwin18.0.0.IC60.gcc.make/kll.json
//
// - Configuration File -
//    MatrixARMPeriodicCapabilities
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Scan_Devices_MatrixARMPeriodic@['capabilities']_processed.kll
//    PartialMapCapabilities
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Macro_PartialMap@['capabilities']_processed.kll
//    HID-IOCapabilities
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Output_HID-IO@['capabilities']_processed.kll
//    USBCapabilities
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Output_USB@['capabilities']_processed.kll
//    latency
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Debug_latency@['capabilities']_processed.kll
//    led
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Debug_led@['capabilities']_processed.kll
// - Generic Files -
// - Base Layer -
//    Infinity 60%
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Scan_Infinity_60@['scancode_map']_processed.kll
//    Infinity 60% Alphabet
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/dev_keyboard_utilities_ergodox_controller_Scan_Infinity_60@['scancode_map', 'alphabet']_processed.kll
// - Default Layer -
//    stdFuncMap
//      /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/.local_share_virtualenvs_Keyboards-vdxSI5dA_lib_python3.7_site-packages_kll_layouts@['stdFuncMap']_processed.kll
// - Partial Layers -
//    Layer 1
//     hhkbpro2
//       /var/folders/ft/swq49vbn0ll23744cl1yrl2w0000gn/T/kll/.local_share_virtualenvs_Keyboards-vdxSI5dA_lib_python3.7_site-packages_kll_layouts_ic60@['hhkbpro2']_processed.kll



#pragma once

// ----- Includes -----

// KLL Include
#include <kll.h>



// ----- Capabilities -----

// Capability function declarations
void Layer_layerLatch_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Layer_layerLock_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Layer_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Layer_layerShift_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Layer_layerState_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_none_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_rotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_testThreadSafe_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_testThreadUnsafe_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_flashMode_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_noneSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbMouseWheel_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );



// Indexed Capabilities Table
const Capability CapabilitiesList[] = {
	/* 0 layerLatch */
	{ Layer_layerLatch_capability, 2, CapabilityFeature_Safe },
	/* 1 layerLock */
	{ Layer_layerLock_capability, 2, CapabilityFeature_Safe },
	/* 2 layerRotate */
	{ Layer_layerRotate_capability, 1, CapabilityFeature_Safe },
	/* 3 layerShift */
	{ Layer_layerShift_capability, 2, CapabilityFeature_Safe },
	/* 4 layerState */
	{ Layer_layerState_capability, 3, CapabilityFeature_Safe },
	/* 5 none */
	{ Macro_none_capability, 0, CapabilityFeature_None },
	/* 6 rotate */
	{ Macro_rotate_capability, 2, CapabilityFeature_None },
	/* 7 testThreadSafe */
	{ Macro_testThreadSafe_capability, 0, CapabilityFeature_Safe },
	/* 8 testThreadUnsafe */
	{ Macro_testThreadUnsafe_capability, 0, CapabilityFeature_None },
	/* 9 consCtrlOut */
	{ Output_consCtrlSend_capability, 2, CapabilityFeature_Safe },
	/* 10 flashMode */
	{ Output_flashMode_capability, 0, CapabilityFeature_Safe },
	/* 11 kbdProtocolBoot */
	{ Output_kbdProtocolBoot_capability, 0, CapabilityFeature_None },
	/* 12 kbdProtocolNKRO */
	{ Output_kbdProtocolNKRO_capability, 0, CapabilityFeature_None },
	/* 13 noneOut */
	{ Output_noneSend_capability, 0, CapabilityFeature_Safe },
	/* 14 sysCtrlOut */
	{ Output_sysCtrlSend_capability, 1, CapabilityFeature_Safe },
	/* 15 toggleKbdProtocol */
	{ Output_toggleKbdProtocol_capability, 0, CapabilityFeature_None },
	/* 16 usbKeyOut */
	{ Output_usbCodeSend_capability, 1, CapabilityFeature_Safe },
	/* 17 mouseWheelOut */
	{ Output_usbMouseWheel_capability, 2, CapabilityFeature_Safe },
	/* 18 mouseOut */
	{ Output_usbMouse_capability, 6, CapabilityFeature_Safe },
};


// -- Result Macros

// Result Macro Guides
Guide_RM( 0 ) = { 1, 9, 184, 0, 0 }; // (HID(ConsCode,default)"184"Eject)
Guide_RM( 1 ) = { 1, 9, 226, 0, 0 }; // (HID(ConsCode,default)"226"Mute)
Guide_RM( 2 ) = { 1, 9, 233, 0, 0 }; // (HID(ConsCode,default)"233"Volume Up)
Guide_RM( 3 ) = { 1, 9, 234, 0, 0 }; // (HID(ConsCode,default)"234"Volume Down)
Guide_RM( 4 ) = { 1, 16, KEY_A_4, 0 }; // (HID(USBCode,default)"4"A)
Guide_RM( 5 ) = { 1, 16, KEY_B_5, 0 }; // (HID(USBCode,default)"5"B)
Guide_RM( 6 ) = { 1, 16, KEY_C_6, 0 }; // (HID(USBCode,default)"6"C)
Guide_RM( 7 ) = { 1, 16, KEY_D_7, 0 }; // (HID(USBCode,default)"7"D)
Guide_RM( 8 ) = { 1, 16, KEY_E_8, 0 }; // (HID(USBCode,default)"8"E)
Guide_RM( 9 ) = { 1, 16, KEY_F_9, 0 }; // (HID(USBCode,default)"9"F)
Guide_RM( 10 ) = { 1, 16, KEY_G_10, 0 }; // (HID(USBCode,default)"10"G)
Guide_RM( 11 ) = { 1, 16, KEY_H_11, 0 }; // (HID(USBCode,default)"11"H)
Guide_RM( 12 ) = { 1, 16, KEY_I_12, 0 }; // (HID(USBCode,default)"12"I)
Guide_RM( 13 ) = { 1, 16, KEY_J_13, 0 }; // (HID(USBCode,default)"13"J)
Guide_RM( 14 ) = { 1, 16, KEY_K_14, 0 }; // (HID(USBCode,default)"14"K)
Guide_RM( 15 ) = { 1, 16, KEY_L_15, 0 }; // (HID(USBCode,default)"15"L)
Guide_RM( 16 ) = { 1, 16, KEY_M_16, 0 }; // (HID(USBCode,default)"16"M)
Guide_RM( 17 ) = { 1, 16, KEY_N_17, 0 }; // (HID(USBCode,default)"17"N)
Guide_RM( 18 ) = { 1, 16, KEY_O_18, 0 }; // (HID(USBCode,default)"18"O)
Guide_RM( 19 ) = { 1, 16, KEY_P_19, 0 }; // (HID(USBCode,default)"19"P)
Guide_RM( 20 ) = { 1, 16, KEY_Q_20, 0 }; // (HID(USBCode,default)"20"Q)
Guide_RM( 21 ) = { 1, 16, KEY_R_21, 0 }; // (HID(USBCode,default)"21"R)
Guide_RM( 22 ) = { 1, 16, KEY_S_22, 0 }; // (HID(USBCode,default)"22"S)
Guide_RM( 23 ) = { 1, 16, KEY_T_23, 0 }; // (HID(USBCode,default)"23"T)
Guide_RM( 24 ) = { 1, 16, KEY_U_24, 0 }; // (HID(USBCode,default)"24"U)
Guide_RM( 25 ) = { 1, 16, KEY_V_25, 0 }; // (HID(USBCode,default)"25"V)
Guide_RM( 26 ) = { 1, 16, KEY_W_26, 0 }; // (HID(USBCode,default)"26"W)
Guide_RM( 27 ) = { 1, 16, KEY_X_27, 0 }; // (HID(USBCode,default)"27"X)
Guide_RM( 28 ) = { 1, 16, KEY_Y_28, 0 }; // (HID(USBCode,default)"28"Y)
Guide_RM( 29 ) = { 1, 16, KEY_Z_29, 0 }; // (HID(USBCode,default)"29"Z)
Guide_RM( 30 ) = { 1, 16, KEY_1_30, 0 }; // (HID(USBCode,default)"30"1)
Guide_RM( 31 ) = { 1, 16, KEY_2_31, 0 }; // (HID(USBCode,default)"31"2)
Guide_RM( 32 ) = { 1, 16, KEY_3_32, 0 }; // (HID(USBCode,default)"32"3)
Guide_RM( 33 ) = { 1, 16, KEY_4_33, 0 }; // (HID(USBCode,default)"33"4)
Guide_RM( 34 ) = { 1, 16, KEY_5_34, 0 }; // (HID(USBCode,default)"34"5)
Guide_RM( 35 ) = { 1, 16, KEY_6_35, 0 }; // (HID(USBCode,default)"35"6)
Guide_RM( 36 ) = { 1, 16, KEY_7_36, 0 }; // (HID(USBCode,default)"36"7)
Guide_RM( 37 ) = { 1, 16, KEY_8_37, 0 }; // (HID(USBCode,default)"37"8)
Guide_RM( 38 ) = { 1, 16, KEY_9_38, 0 }; // (HID(USBCode,default)"38"9)
Guide_RM( 39 ) = { 1, 16, KEY_0_39, 0 }; // (HID(USBCode,default)"39"0)
Guide_RM( 40 ) = { 1, 16, KEY_ENTER_40, 0 }; // (HID(USBCode,default)"40"Enter)
Guide_RM( 41 ) = { 1, 16, KEY_ESC_41, 0 }; // (HID(USBCode,default)"41"Esc)
Guide_RM( 42 ) = { 1, 16, KEY_BACKSPACE_42, 0 }; // (HID(USBCode,default)"42"Backspace)
Guide_RM( 43 ) = { 1, 16, KEY_TAB_43, 0 }; // (HID(USBCode,default)"43"Tab)
Guide_RM( 44 ) = { 1, 16, KEY_SPACE_44, 0 }; // (HID(USBCode,default)"44"Space)
Guide_RM( 45 ) = { 1, 16, KEY_MINUS_45, 0 }; // (HID(USBCode,default)"45"Minus)
Guide_RM( 46 ) = { 1, 16, KEY_EQUAL_46, 0 }; // (HID(USBCode,default)"46"Equal)
Guide_RM( 47 ) = { 1, 16, KEY_LEFT_BRACKET_47, 0 }; // (HID(USBCode,default)"47"Left Bracket)
Guide_RM( 48 ) = { 1, 16, KEY_RIGHT_BRACKET_48, 0 }; // (HID(USBCode,default)"48"Right Bracket)
Guide_RM( 49 ) = { 1, 16, KEY_BACKSLASH_49, 0 }; // (HID(USBCode,default)"49"Backslash)
Guide_RM( 50 ) = { 1, 16, KEY_SEMICOLON_51, 0 }; // (HID(USBCode,default)"51"Semicolon)
Guide_RM( 51 ) = { 1, 16, KEY_QUOTE_52, 0 }; // (HID(USBCode,default)"52"Quote)
Guide_RM( 52 ) = { 1, 16, KEY_COMMA_54, 0 }; // (HID(USBCode,default)"54"Comma)
Guide_RM( 53 ) = { 1, 16, KEY_PERIOD_55, 0 }; // (HID(USBCode,default)"55"Period)
Guide_RM( 54 ) = { 1, 16, KEY_SLASH_56, 0 }; // (HID(USBCode,default)"56"Slash)
Guide_RM( 55 ) = { 1, 16, KEY_CAPS_LOCK_57, 0 }; // (HID(USBCode,default)"57"Caps Lock)
Guide_RM( 56 ) = { 1, 16, KEY_F1_58, 0 }; // (HID(USBCode,default)"58"F1)
Guide_RM( 57 ) = { 1, 16, KEY_F2_59, 0 }; // (HID(USBCode,default)"59"F2)
Guide_RM( 58 ) = { 1, 16, KEY_F3_60, 0 }; // (HID(USBCode,default)"60"F3)
Guide_RM( 59 ) = { 1, 16, KEY_F4_61, 0 }; // (HID(USBCode,default)"61"F4)
Guide_RM( 60 ) = { 1, 16, KEY_F5_62, 0 }; // (HID(USBCode,default)"62"F5)
Guide_RM( 61 ) = { 1, 16, KEY_F6_63, 0 }; // (HID(USBCode,default)"63"F6)
Guide_RM( 62 ) = { 1, 16, KEY_F7_64, 0 }; // (HID(USBCode,default)"64"F7)
Guide_RM( 63 ) = { 1, 16, KEY_F8_65, 0 }; // (HID(USBCode,default)"65"F8)
Guide_RM( 64 ) = { 1, 16, KEY_F9_66, 0 }; // (HID(USBCode,default)"66"F9)
Guide_RM( 65 ) = { 1, 16, KEY_F10_67, 0 }; // (HID(USBCode,default)"67"F10)
Guide_RM( 66 ) = { 1, 16, KEY_F11_68, 0 }; // (HID(USBCode,default)"68"F11)
Guide_RM( 67 ) = { 1, 16, KEY_F12_69, 0 }; // (HID(USBCode,default)"69"F12)
Guide_RM( 68 ) = { 1, 16, KEY_PRINT_SCREEN_70, 0 }; // (HID(USBCode,default)"70"Print Screen)
Guide_RM( 69 ) = { 1, 16, KEY_SCROLL_LOCK_71, 0 }; // (HID(USBCode,default)"71"Scroll Lock)
Guide_RM( 70 ) = { 1, 16, KEY_PAUSE_72, 0 }; // (HID(USBCode,default)"72"Pause)
Guide_RM( 71 ) = { 1, 16, KEY_INSERT_73, 0 }; // (HID(USBCode,default)"73"Insert)
Guide_RM( 72 ) = { 1, 16, KEY_HOME_74, 0 }; // (HID(USBCode,default)"74"Home)
Guide_RM( 73 ) = { 1, 16, KEY_PAGE_UP_75, 0 }; // (HID(USBCode,default)"75"Page Up)
Guide_RM( 74 ) = { 1, 16, KEY_END_77, 0 }; // (HID(USBCode,default)"77"End)
Guide_RM( 75 ) = { 1, 16, KEY_PAGE_DOWN_78, 0 }; // (HID(USBCode,default)"78"Page Down)
Guide_RM( 76 ) = { 1, 16, KEY_RIGHT_79, 0 }; // (HID(USBCode,default)"79"Right)
Guide_RM( 77 ) = { 1, 16, KEY_LEFT_80, 0 }; // (HID(USBCode,default)"80"Left)
Guide_RM( 78 ) = { 1, 16, KEY_DOWN_81, 0 }; // (HID(USBCode,default)"81"Down)
Guide_RM( 79 ) = { 1, 16, KEY_UP_82, 0 }; // (HID(USBCode,default)"82"Up)
Guide_RM( 80 ) = { 1, 16, KEY_KEYPAD_SLASH_84, 0 }; // (HID(USBCode,default)"84"Keypad Slash)
Guide_RM( 81 ) = { 1, 16, KEY_KEYPAD_ASTERISK_85, 0 }; // (HID(USBCode,default)"85"Keypad Asterisk)
Guide_RM( 82 ) = { 1, 16, KEY_KEYPAD_MINUS_86, 0 }; // (HID(USBCode,default)"86"Keypad Minus)
Guide_RM( 83 ) = { 1, 16, KEY_KEYPAD_PLUS_87, 0 }; // (HID(USBCode,default)"87"Keypad Plus)
Guide_RM( 84 ) = { 1, 16, KEY_LEFT_CONTROL_224, 0 }; // (HID(USBCode,default)"224"Left Control)
Guide_RM( 85 ) = { 1, 16, KEY_LEFT_SHIFT_225, 0 }; // (HID(USBCode,default)"225"Left Shift)
Guide_RM( 86 ) = { 1, 16, KEY_LEFT_ALT_226, 0 }; // (HID(USBCode,default)"226"Left Alt)
Guide_RM( 87 ) = { 1, 16, KEY_LEFT_GUI_227, 0 }; // (HID(USBCode,default)"227"Left GUI)
Guide_RM( 88 ) = { 1, 16, KEY_RIGHT_CONTROL_228, 0 }; // (HID(USBCode,default)"228"Right Control)
Guide_RM( 89 ) = { 1, 16, KEY_RIGHT_SHIFT_229, 0 }; // (HID(USBCode,default)"229"Right Shift)
Guide_RM( 90 ) = { 1, 16, KEY_RIGHT_ALT_230, 0 }; // (HID(USBCode,default)"230"Right Alt)
Guide_RM( 91 ) = { 1, 10, 0 }; // (flashMode())
Guide_RM( 92 ) = { 1, 3, 1, 0, 0 }; // (layerShift(1))
Guide_RM( 93 ) = { 1, 3, 2, 0, 0 }; // (layerShift(2))


// -- Result Macro List

// Indexed Table of Result Macros
const ResultMacro ResultMacroList[] = {
	Define_RM( 0 ), // (HID(ConsCode,default)"184"Eject)
	Define_RM( 1 ), // (HID(ConsCode,default)"226"Mute)
	Define_RM( 2 ), // (HID(ConsCode,default)"233"Volume Up)
	Define_RM( 3 ), // (HID(ConsCode,default)"234"Volume Down)
	Define_RM( 4 ), // (HID(USBCode,default)"4"A)
	Define_RM( 5 ), // (HID(USBCode,default)"5"B)
	Define_RM( 6 ), // (HID(USBCode,default)"6"C)
	Define_RM( 7 ), // (HID(USBCode,default)"7"D)
	Define_RM( 8 ), // (HID(USBCode,default)"8"E)
	Define_RM( 9 ), // (HID(USBCode,default)"9"F)
	Define_RM( 10 ), // (HID(USBCode,default)"10"G)
	Define_RM( 11 ), // (HID(USBCode,default)"11"H)
	Define_RM( 12 ), // (HID(USBCode,default)"12"I)
	Define_RM( 13 ), // (HID(USBCode,default)"13"J)
	Define_RM( 14 ), // (HID(USBCode,default)"14"K)
	Define_RM( 15 ), // (HID(USBCode,default)"15"L)
	Define_RM( 16 ), // (HID(USBCode,default)"16"M)
	Define_RM( 17 ), // (HID(USBCode,default)"17"N)
	Define_RM( 18 ), // (HID(USBCode,default)"18"O)
	Define_RM( 19 ), // (HID(USBCode,default)"19"P)
	Define_RM( 20 ), // (HID(USBCode,default)"20"Q)
	Define_RM( 21 ), // (HID(USBCode,default)"21"R)
	Define_RM( 22 ), // (HID(USBCode,default)"22"S)
	Define_RM( 23 ), // (HID(USBCode,default)"23"T)
	Define_RM( 24 ), // (HID(USBCode,default)"24"U)
	Define_RM( 25 ), // (HID(USBCode,default)"25"V)
	Define_RM( 26 ), // (HID(USBCode,default)"26"W)
	Define_RM( 27 ), // (HID(USBCode,default)"27"X)
	Define_RM( 28 ), // (HID(USBCode,default)"28"Y)
	Define_RM( 29 ), // (HID(USBCode,default)"29"Z)
	Define_RM( 30 ), // (HID(USBCode,default)"30"1)
	Define_RM( 31 ), // (HID(USBCode,default)"31"2)
	Define_RM( 32 ), // (HID(USBCode,default)"32"3)
	Define_RM( 33 ), // (HID(USBCode,default)"33"4)
	Define_RM( 34 ), // (HID(USBCode,default)"34"5)
	Define_RM( 35 ), // (HID(USBCode,default)"35"6)
	Define_RM( 36 ), // (HID(USBCode,default)"36"7)
	Define_RM( 37 ), // (HID(USBCode,default)"37"8)
	Define_RM( 38 ), // (HID(USBCode,default)"38"9)
	Define_RM( 39 ), // (HID(USBCode,default)"39"0)
	Define_RM( 40 ), // (HID(USBCode,default)"40"Enter)
	Define_RM( 41 ), // (HID(USBCode,default)"41"Esc)
	Define_RM( 42 ), // (HID(USBCode,default)"42"Backspace)
	Define_RM( 43 ), // (HID(USBCode,default)"43"Tab)
	Define_RM( 44 ), // (HID(USBCode,default)"44"Space)
	Define_RM( 45 ), // (HID(USBCode,default)"45"Minus)
	Define_RM( 46 ), // (HID(USBCode,default)"46"Equal)
	Define_RM( 47 ), // (HID(USBCode,default)"47"Left Bracket)
	Define_RM( 48 ), // (HID(USBCode,default)"48"Right Bracket)
	Define_RM( 49 ), // (HID(USBCode,default)"49"Backslash)
	Define_RM( 50 ), // (HID(USBCode,default)"51"Semicolon)
	Define_RM( 51 ), // (HID(USBCode,default)"52"Quote)
	Define_RM( 52 ), // (HID(USBCode,default)"54"Comma)
	Define_RM( 53 ), // (HID(USBCode,default)"55"Period)
	Define_RM( 54 ), // (HID(USBCode,default)"56"Slash)
	Define_RM( 55 ), // (HID(USBCode,default)"57"Caps Lock)
	Define_RM( 56 ), // (HID(USBCode,default)"58"F1)
	Define_RM( 57 ), // (HID(USBCode,default)"59"F2)
	Define_RM( 58 ), // (HID(USBCode,default)"60"F3)
	Define_RM( 59 ), // (HID(USBCode,default)"61"F4)
	Define_RM( 60 ), // (HID(USBCode,default)"62"F5)
	Define_RM( 61 ), // (HID(USBCode,default)"63"F6)
	Define_RM( 62 ), // (HID(USBCode,default)"64"F7)
	Define_RM( 63 ), // (HID(USBCode,default)"65"F8)
	Define_RM( 64 ), // (HID(USBCode,default)"66"F9)
	Define_RM( 65 ), // (HID(USBCode,default)"67"F10)
	Define_RM( 66 ), // (HID(USBCode,default)"68"F11)
	Define_RM( 67 ), // (HID(USBCode,default)"69"F12)
	Define_RM( 68 ), // (HID(USBCode,default)"70"Print Screen)
	Define_RM( 69 ), // (HID(USBCode,default)"71"Scroll Lock)
	Define_RM( 70 ), // (HID(USBCode,default)"72"Pause)
	Define_RM( 71 ), // (HID(USBCode,default)"73"Insert)
	Define_RM( 72 ), // (HID(USBCode,default)"74"Home)
	Define_RM( 73 ), // (HID(USBCode,default)"75"Page Up)
	Define_RM( 74 ), // (HID(USBCode,default)"77"End)
	Define_RM( 75 ), // (HID(USBCode,default)"78"Page Down)
	Define_RM( 76 ), // (HID(USBCode,default)"79"Right)
	Define_RM( 77 ), // (HID(USBCode,default)"80"Left)
	Define_RM( 78 ), // (HID(USBCode,default)"81"Down)
	Define_RM( 79 ), // (HID(USBCode,default)"82"Up)
	Define_RM( 80 ), // (HID(USBCode,default)"84"Keypad Slash)
	Define_RM( 81 ), // (HID(USBCode,default)"85"Keypad Asterisk)
	Define_RM( 82 ), // (HID(USBCode,default)"86"Keypad Minus)
	Define_RM( 83 ), // (HID(USBCode,default)"87"Keypad Plus)
	Define_RM( 84 ), // (HID(USBCode,default)"224"Left Control)
	Define_RM( 85 ), // (HID(USBCode,default)"225"Left Shift)
	Define_RM( 86 ), // (HID(USBCode,default)"226"Left Alt)
	Define_RM( 87 ), // (HID(USBCode,default)"227"Left GUI)
	Define_RM( 88 ), // (HID(USBCode,default)"228"Right Control)
	Define_RM( 89 ), // (HID(USBCode,default)"229"Right Shift)
	Define_RM( 90 ), // (HID(USBCode,default)"230"Right Alt)
	Define_RM( 91 ), // (flashMode())
	Define_RM( 92 ), // (layerShift(1))
	Define_RM( 93 ), // (layerShift(2))
};


// -- Trigger Macros

// Trigger Macro Guides
Guide_TM( 0 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x01, 0 }; // (S001)
Guide_TM( 1 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x02, 0 }; // (S002)
Guide_TM( 2 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x03, 0 }; // (S003)
Guide_TM( 3 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x04, 0 }; // (S004)
Guide_TM( 4 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x05, 0 }; // (S005)
Guide_TM( 5 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x06, 0 }; // (S006)
Guide_TM( 6 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x07, 0 }; // (S007)
Guide_TM( 7 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x08, 0 }; // (S008)
Guide_TM( 8 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x09, 0 }; // (S009)
Guide_TM( 9 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x0A, 0 }; // (S010)
Guide_TM( 10 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x0B, 0 }; // (S011)
Guide_TM( 11 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x0C, 0 }; // (S012)
Guide_TM( 12 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x0D, 0 }; // (S013)
Guide_TM( 13 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x0E, 0 }; // (S014)
Guide_TM( 14 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x10, 0 }; // (S016)
Guide_TM( 15 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x11, 0 }; // (S017)
Guide_TM( 16 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x12, 0 }; // (S018)
Guide_TM( 17 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x13, 0 }; // (S019)
Guide_TM( 18 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x14, 0 }; // (S020)
Guide_TM( 19 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x15, 0 }; // (S021)
Guide_TM( 20 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x16, 0 }; // (S022)
Guide_TM( 21 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x17, 0 }; // (S023)
Guide_TM( 22 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x18, 0 }; // (S024)
Guide_TM( 23 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x19, 0 }; // (S025)
Guide_TM( 24 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x1A, 0 }; // (S026)
Guide_TM( 25 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x1B, 0 }; // (S027)
Guide_TM( 26 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x1C, 0 }; // (S028)
Guide_TM( 27 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x1D, 0 }; // (S029)
Guide_TM( 28 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x1E, 0 }; // (S030)
Guide_TM( 29 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x1F, 0 }; // (S031)
Guide_TM( 30 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x20, 0 }; // (S032)
Guide_TM( 31 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x21, 0 }; // (S033)
Guide_TM( 32 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x22, 0 }; // (S034)
Guide_TM( 33 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x23, 0 }; // (S035)
Guide_TM( 34 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x24, 0 }; // (S036)
Guide_TM( 35 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x25, 0 }; // (S037)
Guide_TM( 36 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x26, 0 }; // (S038)
Guide_TM( 37 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x27, 0 }; // (S039)
Guide_TM( 38 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x28, 0 }; // (S040)
Guide_TM( 39 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x29, 0 }; // (S041)
Guide_TM( 40 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x2A, 0 }; // (S042)
Guide_TM( 41 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x2B, 0 }; // (S043)
Guide_TM( 42 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x2C, 0 }; // (S044)
Guide_TM( 43 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x2D, 0 }; // (S045)
Guide_TM( 44 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x2E, 0 }; // (S046)
Guide_TM( 45 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x2F, 0 }; // (S047)
Guide_TM( 46 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x30, 0 }; // (S048)
Guide_TM( 47 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x31, 0 }; // (S049)
Guide_TM( 48 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x32, 0 }; // (S050)
Guide_TM( 49 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x33, 0 }; // (S051)
Guide_TM( 50 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x34, 0 }; // (S052)
Guide_TM( 51 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x35, 0 }; // (S053)
Guide_TM( 52 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x36, 0 }; // (S054)
Guide_TM( 53 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x38, 0 }; // (S056)
Guide_TM( 54 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x39, 0 }; // (S057)
Guide_TM( 55 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x3A, 0 }; // (S058)
Guide_TM( 56 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x3B, 0 }; // (S059)
Guide_TM( 57 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x3C, 0 }; // (S060)
Guide_TM( 58 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x3D, 0 }; // (S061)
Guide_TM( 59 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x3E, 0 }; // (S062)
Guide_TM( 60 ) = { 1, TriggerType_Switch1, ScheduleType_Gen, 0x3F, 0 }; // (S063)


// -- Trigger Macro List

// Indexed Table of Trigger Macros
const TriggerMacro TriggerMacroList[] = {
	/* 0 */ Define_TM( 0, 41 ), // (S001) : (HID(USBCode,default)"41"Esc);
	/* 1 */ Define_TM( 1, 30 ), // (S002) : (HID(USBCode,default)"30"1);
	/* 2 */ Define_TM( 1, 56 ), // (S002) : (HID(USBCode,default)"58"F1);
	/* 3 */ Define_TM( 2, 31 ), // (S003) : (HID(USBCode,default)"31"2);
	/* 4 */ Define_TM( 2, 57 ), // (S003) : (HID(USBCode,default)"59"F2);
	/* 5 */ Define_TM( 3, 32 ), // (S004) : (HID(USBCode,default)"32"3);
	/* 6 */ Define_TM( 3, 58 ), // (S004) : (HID(USBCode,default)"60"F3);
	/* 7 */ Define_TM( 4, 33 ), // (S005) : (HID(USBCode,default)"33"4);
	/* 8 */ Define_TM( 4, 59 ), // (S005) : (HID(USBCode,default)"61"F4);
	/* 9 */ Define_TM( 5, 34 ), // (S006) : (HID(USBCode,default)"34"5);
	/* 10 */ Define_TM( 5, 60 ), // (S006) : (HID(USBCode,default)"62"F5);
	/* 11 */ Define_TM( 6, 35 ), // (S007) : (HID(USBCode,default)"35"6);
	/* 12 */ Define_TM( 6, 61 ), // (S007) : (HID(USBCode,default)"63"F6);
	/* 13 */ Define_TM( 7, 36 ), // (S008) : (HID(USBCode,default)"36"7);
	/* 14 */ Define_TM( 7, 62 ), // (S008) : (HID(USBCode,default)"64"F7);
	/* 15 */ Define_TM( 8, 37 ), // (S009) : (HID(USBCode,default)"37"8);
	/* 16 */ Define_TM( 8, 63 ), // (S009) : (HID(USBCode,default)"65"F8);
	/* 17 */ Define_TM( 9, 38 ), // (S010) : (HID(USBCode,default)"38"9);
	/* 18 */ Define_TM( 9, 64 ), // (S010) : (HID(USBCode,default)"66"F9);
	/* 19 */ Define_TM( 10, 39 ), // (S011) : (HID(USBCode,default)"39"0);
	/* 20 */ Define_TM( 10, 65 ), // (S011) : (HID(USBCode,default)"67"F10);
	/* 21 */ Define_TM( 11, 45 ), // (S012) : (HID(USBCode,default)"45"Minus);
	/* 22 */ Define_TM( 11, 66 ), // (S012) : (HID(USBCode,default)"68"F11);
	/* 23 */ Define_TM( 12, 46 ), // (S013) : (HID(USBCode,default)"46"Equal);
	/* 24 */ Define_TM( 12, 67 ), // (S013) : (HID(USBCode,default)"69"F12);
	/* 25 */ Define_TM( 13, 42 ), // (S014) : (HID(USBCode,default)"42"Backspace);
	/* 26 */ Define_TM( 14, 43 ), // (S016) : (HID(USBCode,default)"43"Tab);
	/* 27 */ Define_TM( 14, 55 ), // (S016) : (HID(USBCode,default)"57"Caps Lock);
	/* 28 */ Define_TM( 15, 20 ), // (S017) : (HID(USBCode,default)"20"Q);
	/* 29 */ Define_TM( 16, 26 ), // (S018) : (HID(USBCode,default)"26"W);
	/* 30 */ Define_TM( 16, 91 ), // (S018) : (flashMode());
	/* 31 */ Define_TM( 17, 8 ), // (S019) : (HID(USBCode,default)"8"E);
	/* 32 */ Define_TM( 18, 21 ), // (S020) : (HID(USBCode,default)"21"R);
	/* 33 */ Define_TM( 19, 23 ), // (S021) : (HID(USBCode,default)"23"T);
	/* 34 */ Define_TM( 20, 28 ), // (S022) : (HID(USBCode,default)"28"Y);
	/* 35 */ Define_TM( 21, 24 ), // (S023) : (HID(USBCode,default)"24"U);
	/* 36 */ Define_TM( 22, 12 ), // (S024) : (HID(USBCode,default)"12"I);
	/* 37 */ Define_TM( 22, 68 ), // (S024) : (HID(USBCode,default)"70"Print Screen);
	/* 38 */ Define_TM( 23, 18 ), // (S025) : (HID(USBCode,default)"18"O);
	/* 39 */ Define_TM( 23, 69 ), // (S025) : (HID(USBCode,default)"71"Scroll Lock);
	/* 40 */ Define_TM( 24, 19 ), // (S026) : (HID(USBCode,default)"19"P);
	/* 41 */ Define_TM( 24, 70 ), // (S026) : (HID(USBCode,default)"72"Pause);
	/* 42 */ Define_TM( 25, 47 ), // (S027) : (HID(USBCode,default)"47"Left Bracket);
	/* 43 */ Define_TM( 25, 79 ), // (S027) : (HID(USBCode,default)"82"Up);
	/* 44 */ Define_TM( 26, 48 ), // (S028) : (HID(USBCode,default)"48"Right Bracket);
	/* 45 */ Define_TM( 27, 49 ), // (S029) : (HID(USBCode,default)"49"Backslash);
	/* 46 */ Define_TM( 27, 71 ), // (S029) : (HID(USBCode,default)"73"Insert);
	/* 47 */ Define_TM( 28, 55 ), // (S030) : (HID(USBCode,default)"57"Caps Lock);
	/* 48 */ Define_TM( 29, 4 ), // (S031) : (HID(USBCode,default)"4"A);
	/* 49 */ Define_TM( 29, 3 ), // (S031) : (HID(ConsCode,default)"234"Volume Down);
	/* 50 */ Define_TM( 30, 22 ), // (S032) : (HID(USBCode,default)"22"S);
	/* 51 */ Define_TM( 30, 2 ), // (S032) : (HID(ConsCode,default)"233"Volume Up);
	/* 52 */ Define_TM( 31, 7 ), // (S033) : (HID(USBCode,default)"7"D);
	/* 53 */ Define_TM( 31, 1 ), // (S033) : (HID(ConsCode,default)"226"Mute);
	/* 54 */ Define_TM( 32, 9 ), // (S034) : (HID(USBCode,default)"9"F);
	/* 55 */ Define_TM( 32, 0 ), // (S034) : (HID(ConsCode,default)"184"Eject);
	/* 56 */ Define_TM( 33, 10 ), // (S035) : (HID(USBCode,default)"10"G);
	/* 57 */ Define_TM( 34, 11 ), // (S036) : (HID(USBCode,default)"11"H);
	/* 58 */ Define_TM( 34, 81 ), // (S036) : (HID(USBCode,default)"85"Keypad Asterisk);
	/* 59 */ Define_TM( 35, 13 ), // (S037) : (HID(USBCode,default)"13"J);
	/* 60 */ Define_TM( 35, 80 ), // (S037) : (HID(USBCode,default)"84"Keypad Slash);
	/* 61 */ Define_TM( 36, 14 ), // (S038) : (HID(USBCode,default)"14"K);
	/* 62 */ Define_TM( 36, 72 ), // (S038) : (HID(USBCode,default)"74"Home);
	/* 63 */ Define_TM( 37, 15 ), // (S039) : (HID(USBCode,default)"15"L);
	/* 64 */ Define_TM( 37, 73 ), // (S039) : (HID(USBCode,default)"75"Page Up);
	/* 65 */ Define_TM( 38, 50 ), // (S040) : (HID(USBCode,default)"51"Semicolon);
	/* 66 */ Define_TM( 38, 77 ), // (S040) : (HID(USBCode,default)"80"Left);
	/* 67 */ Define_TM( 39, 51 ), // (S041) : (HID(USBCode,default)"52"Quote);
	/* 68 */ Define_TM( 39, 76 ), // (S041) : (HID(USBCode,default)"79"Right);
	/* 69 */ Define_TM( 40, 40 ), // (S042) : (HID(USBCode,default)"40"Enter);
	/* 70 */ Define_TM( 41, 85 ), // (S043) : (HID(USBCode,default)"225"Left Shift);
	/* 71 */ Define_TM( 42, 29 ), // (S044) : (HID(USBCode,default)"29"Z);
	/* 72 */ Define_TM( 43, 27 ), // (S045) : (HID(USBCode,default)"27"X);
	/* 73 */ Define_TM( 44, 6 ), // (S046) : (HID(USBCode,default)"6"C);
	/* 74 */ Define_TM( 45, 25 ), // (S047) : (HID(USBCode,default)"25"V);
	/* 75 */ Define_TM( 46, 5 ), // (S048) : (HID(USBCode,default)"5"B);
	/* 76 */ Define_TM( 47, 17 ), // (S049) : (HID(USBCode,default)"17"N);
	/* 77 */ Define_TM( 47, 83 ), // (S049) : (HID(USBCode,default)"87"Keypad Plus);
	/* 78 */ Define_TM( 48, 16 ), // (S050) : (HID(USBCode,default)"16"M);
	/* 79 */ Define_TM( 48, 82 ), // (S050) : (HID(USBCode,default)"86"Keypad Minus);
	/* 80 */ Define_TM( 49, 52 ), // (S051) : (HID(USBCode,default)"54"Comma);
	/* 81 */ Define_TM( 49, 74 ), // (S051) : (HID(USBCode,default)"77"End);
	/* 82 */ Define_TM( 50, 53 ), // (S052) : (HID(USBCode,default)"55"Period);
	/* 83 */ Define_TM( 50, 75 ), // (S052) : (HID(USBCode,default)"78"Page Down);
	/* 84 */ Define_TM( 51, 54 ), // (S053) : (HID(USBCode,default)"56"Slash);
	/* 85 */ Define_TM( 51, 78 ), // (S053) : (HID(USBCode,default)"81"Down);
	/* 86 */ Define_TM( 52, 89 ), // (S054) : (HID(USBCode,default)"229"Right Shift);
	/* 87 */ Define_TM( 53, 84 ), // (S056) : (HID(USBCode,default)"224"Left Control);
	/* 88 */ Define_TM( 54, 86 ), // (S057) : (HID(USBCode,default)"226"Left Alt);
	/* 89 */ Define_TM( 55, 87 ), // (S058) : (HID(USBCode,default)"227"Left GUI);
	/* 90 */ Define_TM( 56, 44 ), // (S059) : (HID(USBCode,default)"44"Space);
	/* 91 */ Define_TM( 57, 90 ), // (S060) : (HID(USBCode,default)"230"Right Alt);
	/* 92 */ Define_TM( 58, 92 ), // (S061) : (layerShift(1));
	/* 93 */ Define_TM( 59, 93 ), // (S062) : (layerShift(2));
	/* 94 */ Define_TM( 60, 88 ), // (S063) : (HID(USBCode,default)"228"Right Control);
};


// -- Trigger Macro Record List

// Keeps a record/state of each trigger macro
TriggerMacroRecord TriggerMacroRecordList[ TriggerMacroNum ];



// ----- Trigger Maps -----

// MaxScanCode
// - This is retrieved from the KLL configuration
// - Should be corollated with the max scan code in the scan module
// - Maximum value is 0x100 (0x0 to 0xFF)
// - Increasing it beyond the keyboard's capabilities is just a waste of ram...
#define MaxScanCode 0x3F

// -- Trigger Lists
//
// Index 0: # of triggers in list
// Index n: pointer to trigger macro - use tm() macro

// - Default Layer -
Define_TL( default, 0x00 ) = { 0 };
Define_TL( default, 0x01 ) = { 1, 0 };
Define_TL( default, 0x02 ) = { 1, 1 };
Define_TL( default, 0x03 ) = { 1, 3 };
Define_TL( default, 0x04 ) = { 1, 5 };
Define_TL( default, 0x05 ) = { 1, 7 };
Define_TL( default, 0x06 ) = { 1, 9 };
Define_TL( default, 0x07 ) = { 1, 11 };
Define_TL( default, 0x08 ) = { 1, 13 };
Define_TL( default, 0x09 ) = { 1, 15 };
Define_TL( default, 0x0A ) = { 1, 17 };
Define_TL( default, 0x0B ) = { 1, 19 };
Define_TL( default, 0x0C ) = { 1, 21 };
Define_TL( default, 0x0D ) = { 1, 23 };
Define_TL( default, 0x0E ) = { 1, 25 };
Define_TL( default, 0x0F ) = { 0 };
Define_TL( default, 0x10 ) = { 1, 26 };
Define_TL( default, 0x11 ) = { 1, 28 };
Define_TL( default, 0x12 ) = { 1, 29 };
Define_TL( default, 0x13 ) = { 1, 31 };
Define_TL( default, 0x14 ) = { 1, 32 };
Define_TL( default, 0x15 ) = { 1, 33 };
Define_TL( default, 0x16 ) = { 1, 34 };
Define_TL( default, 0x17 ) = { 1, 35 };
Define_TL( default, 0x18 ) = { 1, 36 };
Define_TL( default, 0x19 ) = { 1, 38 };
Define_TL( default, 0x1A ) = { 1, 40 };
Define_TL( default, 0x1B ) = { 1, 42 };
Define_TL( default, 0x1C ) = { 1, 44 };
Define_TL( default, 0x1D ) = { 1, 45 };
Define_TL( default, 0x1E ) = { 1, 47 };
Define_TL( default, 0x1F ) = { 1, 48 };
Define_TL( default, 0x20 ) = { 1, 50 };
Define_TL( default, 0x21 ) = { 1, 52 };
Define_TL( default, 0x22 ) = { 1, 54 };
Define_TL( default, 0x23 ) = { 1, 56 };
Define_TL( default, 0x24 ) = { 1, 57 };
Define_TL( default, 0x25 ) = { 1, 59 };
Define_TL( default, 0x26 ) = { 1, 61 };
Define_TL( default, 0x27 ) = { 1, 63 };
Define_TL( default, 0x28 ) = { 1, 65 };
Define_TL( default, 0x29 ) = { 1, 67 };
Define_TL( default, 0x2A ) = { 1, 69 };
Define_TL( default, 0x2B ) = { 1, 70 };
Define_TL( default, 0x2C ) = { 1, 71 };
Define_TL( default, 0x2D ) = { 1, 72 };
Define_TL( default, 0x2E ) = { 1, 73 };
Define_TL( default, 0x2F ) = { 1, 74 };
Define_TL( default, 0x30 ) = { 1, 75 };
Define_TL( default, 0x31 ) = { 1, 76 };
Define_TL( default, 0x32 ) = { 1, 78 };
Define_TL( default, 0x33 ) = { 1, 80 };
Define_TL( default, 0x34 ) = { 1, 82 };
Define_TL( default, 0x35 ) = { 1, 84 };
Define_TL( default, 0x36 ) = { 1, 86 };
Define_TL( default, 0x37 ) = { 0 };
Define_TL( default, 0x38 ) = { 1, 87 };
Define_TL( default, 0x39 ) = { 1, 88 };
Define_TL( default, 0x3A ) = { 1, 89 };
Define_TL( default, 0x3B ) = { 1, 90 };
Define_TL( default, 0x3C ) = { 1, 91 };
Define_TL( default, 0x3D ) = { 1, 92 };
Define_TL( default, 0x3E ) = { 1, 93 };
Define_TL( default, 0x3F ) = { 1, 94 };


// - Partial Layers -
// Partial Layer 1
Define_TL( layer1, 0x00 ) = { 1, 2 };
Define_TL( layer1, 0x01 ) = { 1, 4 };
Define_TL( layer1, 0x02 ) = { 1, 6 };
Define_TL( layer1, 0x03 ) = { 1, 8 };
Define_TL( layer1, 0x04 ) = { 1, 10 };
Define_TL( layer1, 0x05 ) = { 1, 12 };
Define_TL( layer1, 0x06 ) = { 1, 14 };
Define_TL( layer1, 0x07 ) = { 1, 16 };
Define_TL( layer1, 0x08 ) = { 1, 18 };
Define_TL( layer1, 0x09 ) = { 1, 20 };
Define_TL( layer1, 0x0A ) = { 1, 22 };
Define_TL( layer1, 0x0B ) = { 1, 24 };
Define_TL( layer1, 0x0C ) = { 0 };
Define_TL( layer1, 0x0D ) = { 0 };
Define_TL( layer1, 0x0E ) = { 1, 27 };
Define_TL( layer1, 0x0F ) = { 0 };
Define_TL( layer1, 0x10 ) = { 1, 30 };
Define_TL( layer1, 0x11 ) = { 0 };
Define_TL( layer1, 0x12 ) = { 0 };
Define_TL( layer1, 0x13 ) = { 0 };
Define_TL( layer1, 0x14 ) = { 0 };
Define_TL( layer1, 0x15 ) = { 0 };
Define_TL( layer1, 0x16 ) = { 1, 37 };
Define_TL( layer1, 0x17 ) = { 1, 39 };
Define_TL( layer1, 0x18 ) = { 1, 41 };
Define_TL( layer1, 0x19 ) = { 1, 43 };
Define_TL( layer1, 0x1A ) = { 0 };
Define_TL( layer1, 0x1B ) = { 1, 46 };
Define_TL( layer1, 0x1C ) = { 0 };
Define_TL( layer1, 0x1D ) = { 1, 49 };
Define_TL( layer1, 0x1E ) = { 1, 51 };
Define_TL( layer1, 0x1F ) = { 1, 53 };
Define_TL( layer1, 0x20 ) = { 1, 55 };
Define_TL( layer1, 0x21 ) = { 0 };
Define_TL( layer1, 0x22 ) = { 1, 58 };
Define_TL( layer1, 0x23 ) = { 1, 60 };
Define_TL( layer1, 0x24 ) = { 1, 62 };
Define_TL( layer1, 0x25 ) = { 1, 64 };
Define_TL( layer1, 0x26 ) = { 1, 66 };
Define_TL( layer1, 0x27 ) = { 1, 68 };
Define_TL( layer1, 0x28 ) = { 0 };
Define_TL( layer1, 0x29 ) = { 0 };
Define_TL( layer1, 0x2A ) = { 0 };
Define_TL( layer1, 0x2B ) = { 0 };
Define_TL( layer1, 0x2C ) = { 0 };
Define_TL( layer1, 0x2D ) = { 0 };
Define_TL( layer1, 0x2E ) = { 0 };
Define_TL( layer1, 0x2F ) = { 1, 77 };
Define_TL( layer1, 0x30 ) = { 1, 79 };
Define_TL( layer1, 0x31 ) = { 1, 81 };
Define_TL( layer1, 0x32 ) = { 1, 83 };
Define_TL( layer1, 0x33 ) = { 1, 85 };


// -- ScanCode Offset Map
// Maps interconnect ids to scancode offsets
//
// Only used for keyboards with an interconnect
const uint8_t InterconnectOffsetList[] = {
	0x00,
	0x3F,
};


// -- ScanCode Indexed Maps
// Maps to a trigger list of macro pointers
//                 _
// <scan code> -> |T|
//                |r| -> <trigger macro pointer 1>
//                |i|
//                |g| -> <trigger macro pointer 2>
//                |g|
//                |e| -> <trigger macro pointer 3>
//                |r|
//                |s| -> <trigger macro pointer n>
//                 -

// - Default Map for ScanCode Lookup -
const nat_ptr_t *default_scanMap[] = { 
default_tl_0x00, default_tl_0x01, default_tl_0x02, default_tl_0x03, default_tl_0x04, default_tl_0x05, default_tl_0x06, default_tl_0x07, default_tl_0x08, default_tl_0x09, default_tl_0x0A, default_tl_0x0B, default_tl_0x0C, default_tl_0x0D, default_tl_0x0E, default_tl_0x0F, default_tl_0x10, default_tl_0x11, default_tl_0x12, default_tl_0x13, default_tl_0x14, default_tl_0x15, default_tl_0x16, default_tl_0x17, default_tl_0x18, default_tl_0x19, default_tl_0x1A, default_tl_0x1B, default_tl_0x1C, default_tl_0x1D, default_tl_0x1E, default_tl_0x1F, default_tl_0x20, default_tl_0x21, default_tl_0x22, default_tl_0x23, default_tl_0x24, default_tl_0x25, default_tl_0x26, default_tl_0x27, default_tl_0x28, default_tl_0x29, default_tl_0x2A, default_tl_0x2B, default_tl_0x2C, default_tl_0x2D, default_tl_0x2E, default_tl_0x2F, default_tl_0x30, default_tl_0x31, default_tl_0x32, default_tl_0x33, default_tl_0x34, default_tl_0x35, default_tl_0x36, default_tl_0x37, default_tl_0x38, default_tl_0x39, default_tl_0x3A, default_tl_0x3B, default_tl_0x3C, default_tl_0x3D, default_tl_0x3E, default_tl_0x3F
};


// - Partial Layer ScanCode Lookup Maps -
// Partial Layer 1
const nat_ptr_t *layer1_scanMap[] = { 
layer1_tl_0x00, layer1_tl_0x01, layer1_tl_0x02, layer1_tl_0x03, layer1_tl_0x04, layer1_tl_0x05, layer1_tl_0x06, layer1_tl_0x07, layer1_tl_0x08, layer1_tl_0x09, layer1_tl_0x0A, layer1_tl_0x0B, layer1_tl_0x0C, layer1_tl_0x0D, layer1_tl_0x0E, layer1_tl_0x0F, layer1_tl_0x10, layer1_tl_0x11, layer1_tl_0x12, layer1_tl_0x13, layer1_tl_0x14, layer1_tl_0x15, layer1_tl_0x16, layer1_tl_0x17, layer1_tl_0x18, layer1_tl_0x19, layer1_tl_0x1A, layer1_tl_0x1B, layer1_tl_0x1C, layer1_tl_0x1D, layer1_tl_0x1E, layer1_tl_0x1F, layer1_tl_0x20, layer1_tl_0x21, layer1_tl_0x22, layer1_tl_0x23, layer1_tl_0x24, layer1_tl_0x25, layer1_tl_0x26, layer1_tl_0x27, layer1_tl_0x28, layer1_tl_0x29, layer1_tl_0x2A, layer1_tl_0x2B, layer1_tl_0x2C, layer1_tl_0x2D, layer1_tl_0x2E, layer1_tl_0x2F, layer1_tl_0x30, layer1_tl_0x31, layer1_tl_0x32, layer1_tl_0x33
};



// ----- Layer Index -----

// -- Layer Index List
//
// Index 0: Default map
// Index n: Additional layers
const Layer LayerIndex[] = {
	Layer_IN( default_scanMap, "D: dev_keyboard_utilities_ergodox_controller_Scan_Devices_MatrixARMPeriodic@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Macro_PartialMap@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Output_HID-IO@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Output_USB@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Debug_latency@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Debug_led@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Scan_Infinity_60@['scancode_map']_processed.kll + dev_keyboard_utilities_ergodox_controller_Scan_Infinity_60@['scancode_map', 'alphabet']_processed.kll + .local_share_virtualenvs_Keyboards-vdxSI5dA_lib_python3.7_site-packages_kll_layouts@['stdFuncMap']_processed.kll", 0x00 ),
	Layer_IN( layer1_scanMap, "1: dev_keyboard_utilities_ergodox_controller_Scan_Devices_MatrixARMPeriodic@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Macro_PartialMap@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Output_HID-IO@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Output_USB@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Debug_latency@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Debug_led@['capabilities']_processed.kll + dev_keyboard_utilities_ergodox_controller_Scan_Infinity_60@['scancode_map']_processed.kll + dev_keyboard_utilities_ergodox_controller_Scan_Infinity_60@['scancode_map', 'alphabet']_processed.kll + .local_share_virtualenvs_Keyboards-vdxSI5dA_lib_python3.7_site-packages_kll_layouts_ic60@['hhkbpro2']_processed.kll", 0x02 ),
};


// - Layer State
LayerStateType LayerState[ LayerNum ];



// ----- Rotation Parameters -----

// Each position represents the maximum rotation value for the index
const uint8_t Rotation_MaxParameter[] = {
};



// ----- Key Positions -----

// -- Physical Key Positions
//
// Index 0: Key 1
// Each key has 6 dimensions
// x,y,z and rx,ry,rz (rotation)
// Units are in mm
const Position Key_Positions[] = {
	PositionEntry( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S001 <= x:0,y:0;
	PositionEntry( 19.05, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S002 <= x:19.05,y:0;
	PositionEntry( 38.1, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S003 <= x:38.1,y:0;
	PositionEntry( 57.15, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S004 <= x:57.15,y:0;
	PositionEntry( 76.2, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S005 <= x:76.2,y:0;
	PositionEntry( 95.25, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S006 <= x:95.25,y:0;
	PositionEntry( 114.3, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S007 <= x:114.3,y:0;
	PositionEntry( 133.35, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S008 <= x:133.35,y:0;
	PositionEntry( 152.4, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S009 <= x:152.4,y:0;
	PositionEntry( 171.45, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S010 <= x:171.45,y:0;
	PositionEntry( 190.5, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S011 <= x:190.5,y:0;
	PositionEntry( 209.55, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S012 <= x:209.55,y:0;
	PositionEntry( 228.6, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S013 <= x:228.6,y:0;
	PositionEntry( 257.175, 0.0, 0.0, 0.0, 0.0, 0.0 ), // S014 <= x:257.175,y:0;
	PositionEntry( 4.76, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S016 <= x:4.76,y:-19.05;
	PositionEntry( 27.81, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S017 <= x:27.81,y:-19.05;
	PositionEntry( 46.86, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S018 <= x:46.86,y:-19.05;
	PositionEntry( 65.91, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S019 <= x:65.91,y:-19.05;
	PositionEntry( 84.96, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S020 <= x:84.96,y:-19.05;
	PositionEntry( 104.01, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S021 <= x:104.01,y:-19.05;
	PositionEntry( 123.06, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S022 <= x:123.06,y:-19.05;
	PositionEntry( 142.11, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S023 <= x:142.11,y:-19.05;
	PositionEntry( 161.16, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S024 <= x:161.16,y:-19.05;
	PositionEntry( 180.21, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S025 <= x:180.21,y:-19.05;
	PositionEntry( 199.26, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S026 <= x:199.26,y:-19.05;
	PositionEntry( 218.31, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S027 <= x:218.31,y:-19.05;
	PositionEntry( 237.36, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S028 <= x:237.36,y:-19.05;
	PositionEntry( 260.41, -19.05, 0.0, 0.0, 0.0, 0.0 ), // S029 <= x:260.41,y:-19.05;
	PositionEntry( 7.14, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S030 <= x:7.14,y:-38.10;
	PositionEntry( 33.14, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S031 <= x:33.14,y:-38.10;
	PositionEntry( 52.19, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S032 <= x:52.19,y:-38.10;
	PositionEntry( 71.24, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S033 <= x:71.24,y:-38.10;
	PositionEntry( 90.29, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S034 <= x:90.29,y:-38.10;
	PositionEntry( 109.34, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S035 <= x:109.34,y:-38.10;
	PositionEntry( 128.39, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S036 <= x:128.39,y:-38.10;
	PositionEntry( 147.44, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S037 <= x:147.44,y:-38.10;
	PositionEntry( 166.49, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S038 <= x:166.49,y:-38.10;
	PositionEntry( 185.54, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S039 <= x:185.54,y:-38.10;
	PositionEntry( 204.59, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S040 <= x:204.59,y:-38.10;
	PositionEntry( 223.64, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S041 <= x:223.64,y:-38.10;
	PositionEntry( 254.64, -38.1, 0.0, 0.0, 0.0, 0.0 ), // S042 <= x:254.64,y:-38.10;
	PositionEntry( 11.9, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S043 <= x:11.9,y:-57.15;
	PositionEntry( 42.9, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S044 <= x:42.9,y:-57.15;
	PositionEntry( 61.95, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S045 <= x:61.95,y:-57.15;
	PositionEntry( 81.0, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S046 <= x:81,y:-57.15;
	PositionEntry( 100.05, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S047 <= x:100.05,y:-57.15;
	PositionEntry( 119.1, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S048 <= x:119.1,y:-57.15;
	PositionEntry( 138.15, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S049 <= x:138.15,y:-57.15;
	PositionEntry( 157.2, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S050 <= x:157.2,y:-57.15;
	PositionEntry( 176.25, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S051 <= x:176.25,y:-57.15;
	PositionEntry( 195.3, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S052 <= x:195.3,y:-57.15;
	PositionEntry( 214.35, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S053 <= x:214.35,y:-57.15;
	PositionEntry( 250.031, -57.15, 0.0, 0.0, 0.0, 0.0 ), // S054 <= x:250.031,y:-57.15;
	PositionEntry( 2.381, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S056 <= x:2.381,y:-76.20;
	PositionEntry( 26.193, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S057 <= x:26.193,y:-76.20;
	PositionEntry( 50.006, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S058 <= x:50.006,y:-76.20;
	PositionEntry( 121.443, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S059 <= x:121.443,y:-76.20;
	PositionEntry( 195.262, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S060 <= x:195.262,y:-76.20;
	PositionEntry( 216.693, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S061 <= x:216.693,y:-76.20;
	PositionEntry( 240.493, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S062 <= x:240.493,y:-76.20;
	PositionEntry( 264.306, -76.2, 0.0, 0.0, 0.0, 0.0 ), // S063 <= x:264.306,y:-76.20;
};

